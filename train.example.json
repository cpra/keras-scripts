// Example file for use with `train.py` (and others)
// Note that all comments must be removed as JSON does not support them
// ~Christopher
{
    // Network properties
    "netgen": {
        // The generator to use for loading the net, in `module.generator` format
        // See `kutils/netdefs.py` for examples
        "path": "kutils.netdefs.example_cifar10_cnn",

        // Optional path to add to the python path before attempting to find the generator
        // Can be used instead of manipulating the python path by other means
        "spath": null,

        // Arguments to pass to the generator function
        "args": {
            // Number of (color) channels
            "channels": 3,

            // Number of rows (height) of patches
            "rows": 32,

            // Number of columns (width) of patches
            "cols": 32
        }
    },

    // Properties related to training
    "train": {
        // Keras optimizer properties
        "optimizer": {
            // Optimizer to use (must be a valid Keras optimizer name)
            "type": "SGD",

            // Arguments to pass to the optimizer during initialization
            "args": {
                // Initial learning rate
                "lr": 0.01,

                // Learning rate decay
                "decay": 0,

                // Momentum
                "momentum": 0.9,

                // Whether to use Nesterov momentum
                "nesterov": true
            }
        }
    },

    // Data properties
    "data": {
        // One or several paths to HDF5 files that contain `X` (samples*dim numpy float array of features) and `y` (samples*1 numpy int array of class labels)
        // A training epoch consists of training on all these files
        "train": [
            "PATH_TO_TRAINING_DATA.h5"
        ],

        // (Optional) one or several paths to HDF5 files that contain `X` (samples*dim numpy float array of features) and `y` (samples*1 numpy int array of class labels)
        // The data are used for evaluation after each training epoch
        "val": [
            "PATH_TO_VALIDATION_DATA.h5"
        ],

        // Minibatch size
        "batch_size": 64
    },

    // Preprocessing properties
    "preprocess": {
        // Whether to perform per-channel mean-subtraction
        "demean": true,

        // Value by which to divide feature vectors (after mean-subtraction)
        "divide": 255
    },

    // Online minibatch augmentation during training and validation (and testing)
    // See code documentation of `MinibatchProcessor` in `kutils/utils.py`
    "augment": {
        // Augmentation at training time
        "train": {
            // Horizontal mirroring
            "hmirror": {
                "proba": 0.5
            },
            // Random similarity transform
            "rsim": {
                "smin": 0.75,
                "smax": 1.0,
                "rmin": -45.0,
                "rmax": 45.0,
                "tmin": -3.0,
                "tmax": 3.0
            },
            // Random cropping
            "crop": {
                "rows": 40,
                "cols": 40,
                "location": "random"
            }
        },
        // Augmentation at validation and test time
        "val": {
            // Center crops
            "crop": {
                "rows": 40,
                "cols": 40,
                "location": "center"
            }
        }
    }
}
